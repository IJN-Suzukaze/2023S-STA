require(car) #linearHypothesis
require(estimatr) #lm_robust and iv_robust
require(haven) #read_dta
require(marginaleffects) #avg_comparisons
require(MatchIt) #matchit
require(optmatch) #matchit
require(sandwich) #avg_comparisons
require(tidyverse) #tidy
#Setting random seed for replicability
set.seed(12345)
#Set working directory
setwd("your path here")
#Read in the data
BCG14 = read_dta("replication_data.dta")
View(BCG14)
View(BCG14)
#Vector of all covariates
X = c("nivetude1", "nivetude3", "nivetude4", "Cadre", "Techn", "EmployQ", "EmployNQ", "OuvrQ",
"agegr2635", "agegr3645", "agegr4655", "agegr56", "femme", "marie", "onechild", "twoormorechild",
"French", "African", "IdF", "North", "ce1", "ce2", "EconLayoff", "PersLayoff", "EndCDD",
"EndInterim", "exper0", "exper1_5", "rsqstat2", "rsqstat3", "tempcomp", "dezus", "salaireB",
"salaireC", "salaireD", "salaireE", "salaireG", "primo", "Insertion", "Interim", "Q1", "Q2", "Q3")
#Vector of selected covariates
Xall = c("nivetude2", "woman", "marie", "nochild", "PersLayoff", "French")
help(lm_robust)
??lm_robust
#####################
##### BALANCING #####
#####################
for (i in Xall) {
balancing = lm_robust(as.formula(paste(i, "~ 0 + CLA + CVE + OPP")),
se_type = "stata", data = BCG14)
#Display estimates
print(tidy(balancing, conf.int = TRUE))
#Test if levels of CLA and CVE are equal
print(linearHypothesis(balancing, "CLA = CVE"))
#Test if levels of CLA and OPP are equal
print(linearHypothesis(balancing, "CLA = OPP"))
#Test if levels of CVE and OPP are equal
print(linearHypothesis(balancing, "CVE = OPP"))
}
install.packages("estimatr")
require(car) #linearHypothesis
require(estimatr) #lm_robust and iv_robust
require(haven) #read_dta
require(marginaleffects) #avg_comparisons
require(MatchIt) #matchit
require(optmatch) #matchit
require(sandwich) #avg_comparisons
require(tidyverse) #tidy
library(car) #linearHypothesis
library(estimatr) #lm_robust and iv_robust
library(haven) #read_dta
library(marginaleffects) #avg_comparisons
install.packages("marginaleffects")
library(car) #linearHypothesis
library(estimatr) #lm_robust and iv_robust
library(haven) #read_dta
library(marginaleffects) #avg_comparisons
library(MatchIt) #matchit
install.packages("MatchIt")
install.packages("optmatch")
install.packages("sandwich")
library(marginaleffects) #avg_comparisons
library(MatchIt) #matchit
library(optmatch) #matchit
library(sandwich) #avg_comparisons
library(tidyverse) #tidy
library(car) #linearHypothesis
library(estimatr) #lm_robust and iv_robust
library(haven) #read_dta
#####################
##### BALANCING #####
#####################
for (i in Xall) {
balancing = lm_robust(as.formula(paste(i, "~ 0 + CLA + CVE + OPP")),
se_type = "stata", data = BCG14)
#Display estimates
print(tidy(balancing, conf.int = TRUE))
#Test if levels of CLA and CVE are equal
print(linearHypothesis(balancing, "CLA = CVE"))
#Test if levels of CLA and OPP are equal
print(linearHypothesis(balancing, "CLA = OPP"))
#Test if levels of CVE and OPP are equal
print(linearHypothesis(balancing, "CVE = OPP"))
}
#Non-weighted OLS regression
#Estimate the model
ITT_m1 = lm_robust(EMPLOI_6MOIS ~ CVE + OPP, se_type = "stata", data = BCG14)
#Display estimates
tidy(ITT_m1, conf.int = TRUE)
#Weighted OLS regression (Table 3, column 1, scaled with factor 100)
#Estimate the model
ITT_m2 = lm_robust(EMPLOI_6MOIS ~ CVE + OPP, weights = POIDS_PZ_6MOIS, se_type = "stata", data = BCG14)
#Display estimates
tidy(ITT_m2, conf.int = TRUE)
#Test if ITT estimates of CVE and OPP are equal
linearHypothesis(ITT_m2, "CVE = OPP")
#Weighted OLS regression with controls (Table 3, column 2, scaled with factor 100)
#Write formula
formula_ITT_m3 = as.formula(paste("EMPLOI_6MOIS ~ CVE + OPP + ", paste(X, collapse= "+")))
#Display formula
formula_ITT_m3
#Estimate the model
ITT_m3 = lm_robust(formula_ITT_m3, weights = POIDS_PZ_6MOIS, se_type = "stata", data = BCG14)
#Display estimates
tidy(ITT_m3, conf.int = TRUE)
#Test if ITT estimates of CVE and OPP are equal
linearHypothesis(ITT_m3, "CVE = OPP")
#Display estimates
tidy(compliance_m1, conf.int = TRUE)
compliance_m1 = lm_robust(acceptationCVE_6MOIS ~ 0 + CVE + OPP + CLA, weights = POIDS_PZ_6MOIS,
se_type = "stata", data = BCG14)
#Display estimates
tidy(compliance_m1, conf.int = TRUE)
compliance_m2 = lm_robust(acceptationOPP_6MOIS ~ 0 + CVE + OPP + CLA, weights = POIDS_PZ_6MOIS,
se_type = "stata", data = BCG14)
#Display estimates
tidy(compliance_m2, conf.int = TRUE)
View(compliance_m1)
View(compliance_m2)
